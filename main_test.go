package main

import (
	"encoding/json"
	"os"
	"testing"

	sample00gen "github.com/wcharczuk/json2go/testdata/sample_00_gen"
	sample01gen "github.com/wcharczuk/json2go/testdata/sample_01_gen"
	samplegen "github.com/wcharczuk/json2go/testdata/sample_gen"
)

func Test_sample(t *testing.T) {
	testData, err := os.ReadFile("testdata/sample.json")
	if err != nil {
		t.Fail()
	}

	var output samplegen.AutoGenerated
	err = json.Unmarshal(testData, &output)
	if err != nil {
		t.Errorf("%+v\n", err)
		t.Fail()
	}
}

func Test_sample_00(t *testing.T) {
	testData, err := os.ReadFile("testdata/sample_00.json")
	if err != nil {
		t.Fail()
	}

	var output sample00gen.AutoGenerated
	err = json.Unmarshal(testData, &output)
	if err != nil {
		t.Errorf("%+v\n", err)
		t.Fail()
	}
}

func Test_sample_01(t *testing.T) {
	testData, err := os.ReadFile("testdata/sample_01.json")
	if err != nil {
		t.Fail()
	}

	var output sample01gen.AutoGenerated
	err = json.Unmarshal(testData, &output)
	if err != nil {
		t.Errorf("%+v\n", err)
		t.Fail()
	}
}

func Test_fieldNameForName(t *testing.T) {
	testCases := [...]struct {
		Input    string
		Expected string
	}{
		{Input: "", Expected: ""},
		{Input: "name", Expected: "Name"},
		{Input: "0name", Expected: "Name"},
		{Input: "name name", Expected: "NameName"},
		{Input: "name_name", Expected: "NameName"},
		{Input: "name.name", Expected: "NameName"},
		{Input: "nameId", Expected: "NameID"},
		{Input: "nameUrl", Expected: "NameURL"},
	}

	for _, tc := range testCases {
		actual := fieldNameForName(tc.Input)
		if tc.Expected != actual {
			t.Errorf("expected %q actual %q", tc.Expected, actual)
		}
	}
}
