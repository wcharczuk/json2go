package main

import (
	"encoding/json"
	"os"
	"testing"

	sample00gen "github.com/wcharczuk/json2go/testdata/sample_00_gen"
	sample01gen "github.com/wcharczuk/json2go/testdata/sample_01_gen"
	samplegen "github.com/wcharczuk/json2go/testdata/sample_gen"
)

func Test_sample(t *testing.T) {
	testData, err := os.ReadFile("testdata/sample.json")
	if err != nil {
		t.Fail()
	}

	var output samplegen.AutoGenerated
	err = json.Unmarshal(testData, &output)
	if err != nil {
		t.Errorf("%+v\n", err)
		t.Fail()
	}
}

func Test_sample_00(t *testing.T) {
	testData, err := os.ReadFile("testdata/sample_00.json")
	if err != nil {
		t.Fail()
	}

	var output sample00gen.AutoGenerated
	err = json.Unmarshal(testData, &output)
	if err != nil {
		t.Errorf("%+v\n", err)
		t.Fail()
	}
}

func Test_sample_01(t *testing.T) {
	testData, err := os.ReadFile("testdata/sample_01.json")
	if err != nil {
		t.Fail()
	}

	var output sample01gen.AutoGenerated
	err = json.Unmarshal(testData, &output)
	if err != nil {
		t.Errorf("%+v\n", err)
		t.Fail()
	}
}

func Test_fieldNameForName(t *testing.T) {
	testCases := [...]struct {
		Input    string
		Expected string
	}{
		{Input: "", Expected: ""},
		{Input: "name", Expected: "Name"},
		{Input: "0name", Expected: "Name"},
		{Input: "name name", Expected: "NameName"},
		{Input: "name_name", Expected: "NameName"},
		{Input: "name.name", Expected: "NameName"},
		{Input: "nameId", Expected: "NameID"},
		{Input: "nameUrl", Expected: "NameURL"},
		{Input: "$$", Expected: "INVALID"},
		{Input: "$$Foo", Expected: "Foo"},
	}

	for _, tc := range testCases {
		actual := fieldNameForName(tc.Input)
		if tc.Expected != actual {
			t.Errorf("expected %q actual %q", tc.Expected, actual)
		}
	}
}

func Test_Object_FieldNames(t *testing.T) {
	o := Object{
		Fields: map[string]Node{
			"foo":  Primitive("bar"),
			"bar":  Object{},
			"id":   Primitive("0"),
			"$id":  Primitive("0"),
			"$$id": Primitive("0"),
		},
	}

	fn := o.FieldNames()
	if len(fn) != 5 {
		t.Fatalf("expected 5 fields, got %d", len(fn))
	}
	if fn[0].JSON != "bar" {
		t.Errorf("at field name index 0; expect json %q got %q", "bar", fn[0].JSON)
	}
	if fn[1].JSON != "foo" {
		t.Errorf("at field name index 0; expect json %q got %q", "foo", fn[1].JSON)
	}
	if fn[2].JSON != "id" {
		t.Errorf("at field name index 0; expect json %q got %q", "id", fn[2].JSON)
	}
	if fn[3].JSON != "$id" {
		t.Errorf("at field name index 0; expect json %q got %q", "$id", fn[3].JSON)
	}
	if fn[4].JSON != "$$id" {
		t.Errorf("at field name index 0; expect json %q got %q", "$$id", fn[4].JSON)
	}

	if fn[0].Go != "Bar" {
		t.Errorf("at field name index 0; expect json %q got %q", "Bar", fn[0].Go)
	}
	if fn[1].Go != "Foo" {
		t.Errorf("at field name index 0; expect json %q got %q", "Foo", fn[1].Go)
	}
	if fn[2].Go != "ID" {
		t.Errorf("at field name index 0; expect json %q got %q", "ID", fn[2].Go)
	}
	if fn[3].Go != "ID_2" {
		t.Errorf("at field name index 0; expect json %q got %q", "ID_2", fn[3].Go)
	}
	if fn[4].Go != "ID_3" {
		t.Errorf("at field name index 0; expect json %q got %q", "ID_3", fn[4].Go)
	}
}
